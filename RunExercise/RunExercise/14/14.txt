1. Напишите шаблон функции, возвращающей среднее арифметическое всех
элементов массива. Аргументами функции должны быть имя и размер
массива (типа int). В main() проверьте работу функции с массивами типа
int, long, double  и char.

*2. Очередь — это тип хранилища данных. Она напоминает по своей сути
стек, только вместо правила LIFO (последний вошел — первый вышел)
использует правило FIFO (первый вошел — первый вышел). В общем,
как очередь у окошка в банке. Если вы заносите в массив числа 1, 2, 3, об-
ратно вы их получите в той же последовательности.
Стеку требуется для работы только один индекс массива (top, вершина
массива. См. программу STAKARAY из главы 7). Очереди же требуется два
индекса: индекс хвоста, куда добавляются новые элементы, и индекс голо-
вы очереди, откуда исчезают старые. Хвост постепенно сдвигается, как и
голова. Если хвост или голова достигает конца массива, он переставляет-
ся на начало.
Напишите шаблон класса для работы с очередью. Предположим, что про-
граммист не будет совершать ошибок при написании ее модели. Напри-
мер, вместимость очереди не будет превышена, а из пустой очереди не
будет производиться попыток удаления данных. Определите несколько
очередей разных типов и поработайте с их данными.

*3. Добавьте механизм обработки исключений в программу из упражнения 2.
Рассмотрите два исключения: при превышении размера очереди и при по-
пытке удаления данных из пустой очереди. Это можно сделать, добавив но-
вый элемент данных в класс очереди — счетчик текущего числа элементов в
очереди. Инкрементируйте счетчик при добавлении нового элемента, декре-
ментируйте, соответственно, при удалении элемента из головы очереди. Ге-
нерируйте исключение, если счетчик превысил размер массива или если он
стал меньше 0.

Можно попробовать сделать main() интерактивной, чтобы пользователь
мог вводить и извлекать данные. Так будет проще проверить работу напи-
санных функций. С помощью механизма исключений программа должна
обеспечивать повторную попытку ввода данных пользователем без нару-
шения целостности содержимого очереди.

4.	Создайте функцию swaps(), обменивающую значения двух аргументов, по-
сылаемых ей. (Возможно, вы догадаетесь передавать эти аргументы по
ссылке.) Сделайте из функции шаблон, чтобы она могла использоваться
с любыми числовыми типами данных (int, char, float и т. д.). Напишите
main() для тестирования функции.

5.	Создайте функцию amax(), возвращающую значение максимального эле-
мента массива. Аргументами функции должны быть адрес и размер мас-
сива. Сделайте из функции шаблон, чтобы она могла работать с массивом
любого числового типа. Напишите секцию main(), в которой проверьте
работу функции с разными типами массивов.

6.	Начните работу с класса safearay из программы ARROVER3 (глава 8). Сделай-
те класс шаблоном, чтобы массив мог хранить любые типы данных. В сек-
ции main() создайте, по крайней мере, два массива разных типов.

7.	За основу возьмите класс frac и калькулятор с четырьмя функциями из
упражнения 7 главы 8. Сделайте этот класс шаблоном, чтобы его можно
было реализовывать с использованием различных типов данных в качест-
ве делимого и делителя. Конечно, это должны быть целочисленные типы,
что строго ограничивает вас в их выборе (char, short, int и long). Можно,
впрочем, определить и свой целочисленный класс, никто не запрещает.
В main() реализуйте класс frac<char> и используйте его при разработке
калькулятора с четырьмя функциями. Этому классу требуется меньше па-
мяти, чем frac<int>, но с его помощью невозможно выполнять деление
больших чисел.

8.	Добавьте класс исключений к программе ARROVER из главы 8, чтобы ин-
дексы, выходящие за пределы массива, вызывали генерацию исключения.
Блок-ловушка может выводить пользователю сообщение об ошибке.

9.	Измените программу из предыдущего упражнения таким образом, чтобы
в сообщение об ошибке входила информация о значении индекса, привед-
шего к сбою.

10. Есть разные мнения на тему того, когда целесообразно использовать ме-
ханизм исключений. Обратимся к программе ENGLERR из главы 12 «Пото-
ки и файлы». Надо ли в виде исключений оформлять ошибки, которые
делает пользователь при вводе данных? Для этого упражнения будем счи-
тать, что надо. Добавьте класс исключений к классу Distance в указанной
программе (см. также примеры XDIST и XDIST2 в этой главе). Сгенерируйте
исключения во всех местах, где ENGLERR выводила сообщение об ошибке.
Для выявления конкретной причины исключения (вместо дюймов введе-
ны какие-то символы, значение дюймов выходит за область допустимых
