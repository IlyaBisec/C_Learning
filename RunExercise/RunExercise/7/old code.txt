/*#include <iostream>
#include <cstdlib>
using namespace std;

// Определяем емкость queue по умолчанию
#define SIZE 1000

// Класс для хранения queue
class Queue
{
    int* arr;       // массив для хранения элементов queue
    int capacity;   // максимальная емкость queue
    int front;      // front указывает на передний элемент в queue (если есть)
    int rear;       // задняя часть указывает на последний элемент в queue
    int count;      // текущий размер queue

public:
    Queue(int size = SIZE);     // конструктор
    ~Queue();                   // деструктор

    int dequeue();
    void enqueue(int x);
    int peek();
    int size();
    bool isEmpty();
    bool isFull();
};

// Конструктор для инициализации queue
Queue::Queue(int size)
{
    arr = new int[size];
    capacity = size;
    front = 0;
    rear = -1;
    count = 0;
}

// Деструктор для освобождения памяти, выделенной для queue
Queue::~Queue() {
    delete[] arr;
}

// Вспомогательная функция для удаления переднего элемента из очереди
int Queue::dequeue()
{
    // проверка на опустошение queue
    if (isEmpty())
    {
        cout << "Underflow\nProgram Terminated\n";
        exit(EXIT_FAILURE);
    }

    int x = arr[front];
    cout << "Removing " << x << endl;

    front = (front + 1) % capacity;
    count--;

    return x;
}

// Вспомогательная функция для добавления элемента в queue
void Queue::enqueue(int item)
{
    // проверка на переполнение queue
    if (isFull())
    {
        cout << "Overflow\nProgram Terminated\n";
        exit(EXIT_FAILURE);
    }

    cout << "Inserting " << item << endl;

    rear = (rear + 1) % capacity;
    arr[rear] = item;
    count++;
}

// Вспомогательная функция для возврата первого элемента queue
int Queue::peek()
{
    if (isEmpty())
    {
        cout << "Underflow\nProgram Terminated\n";
        exit(EXIT_FAILURE);
    }
    return arr[front];
}

// Вспомогательная функция для возврата размера queue
int Queue::size() {
    return count;
}

// Вспомогательная функция для проверки, пуста ли queue или нет
bool Queue::isEmpty() {
    return (size() == 0);
}

// Вспомогательная функция для проверки того, заполнена ли queue или нет
bool Queue::isFull() {
    return (size() == capacity);
}

int main()
{
    // создаем queue емкостью 5
    Queue q(5);

    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    q.enqueue(5);

    cout << "The front element is " << q.peek() << endl;
    cout << "The queue size is " << q.size() << endl;

    q.dequeue();
    q.dequeue();
    q.dequeue();

    q.enqueue(6);
    q.enqueue(7);
    q.enqueue(8);

    cout << "The front element is " << q.peek() << endl;
    cout << "The queue size is " << q.size() << endl;

    q.dequeue();
    q.dequeue();
    q.dequeue();

    q.enqueue(9);
    q.enqueue(10);
    q.enqueue(11);

    cout << "The front element is " << q.peek() << endl;
    cout << "The queue size is " << q.size() << endl;

    q.dequeue();
    q.dequeue();
    q.dequeue();
    q.dequeue();




    if (q.isEmpty()) {
        cout << "The queue is empty\n";
    }
    else {
        cout << "The queue is not empty\n";
        cout << "The queue size is " << q.size() << endl;
    }

    return 0;
}*/